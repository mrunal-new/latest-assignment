{"version":3,"sources":["components/register/index.js","components/demo-data/generator.js","components/users/index.js","components/demo-data/random.js","App.js","reportWebVitals.js","index.js"],"names":["schema","yup","shape","firstName","min","max","required","lastName","email","phoneNumber","password","matches","confirmPassword","oneOf","gender","Register","useState","undefined","formData","setFormData","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","console","log","style","marginTop","Form","onSubmit","data","Group","controlId","Label","Control","type","color","message","id","value","for","Button","variant","Object","keys","map","textAlign","display","femaleFirstNames","maleFirstNames","lastNames","cities","cars","defaultColumnValues","name","Male","Female","city","car","i","model","abbr","state","getRowId","row","title","columns","columnValues","length","random","mW","mZ","mask","randomSeed","record","forEach","column","values","Math","floor","index","push","generateRows","rows","setRows","columnName","editingEnabled","editingStateColumnExtensions","Paper","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","deletedSet","Set","filter","has","defaultEditingRowIds","columnExtensions","showAddCommand","showEditCommand","showDeleteCommand","App","conditionalRender","setConditionalRender","Container","onClick","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea2bd80e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\n\r\nconst schema = yup.object().shape({\r\n  firstName: yup.string().min(3).max(12).required(),\r\n  lastName: yup.string().min(1).max(12).required(),\r\n  email: yup.string().email('Invalid email').required(),\r\n  phoneNumber: yup.number().min(10),\r\n  password: yup.string().required().matches(\r\n    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{10,}$/,\r\n      \"Must Contain 10 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n  ),\r\n  confirmPassword: yup.string()\r\n     .oneOf([yup.ref('password'), null], 'Passwords must match'),\r\n  gender: yup.string().required(),\r\n  // age: yup.number().positive().integer().required(),\r\n});\r\n\r\nconst Register = () => {\r\n\r\n  const [formData, setFormData] = useState(undefined);\r\n\r\n  const { register, handleSubmit, formState:{ errors } } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const onSubmit = data => { console.log(data); setFormData(data)}\r\n\r\n  console.log(errors);\r\n  return (\r\n    <div style={{ marginTop: '50px' }}>\r\n      <h1>Register</h1>\r\n\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>First Name</Form.Label>\r\n          <Form.Control type=\"text\" {...register(\"firstName\")}  />\r\n          <p style={{ color: 'red' }}>{errors.firstName?.message}</p>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Last Name</Form.Label>\r\n          <Form.Control type=\"text\" {...register(\"lastName\")} />\r\n          <p style={{ color: 'red' }}>{errors.lastName?.message}</p>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Email</Form.Label>\r\n          <Form.Control type=\"email\" {...register(\"email\")}  />\r\n          <p style={{ color: 'red' }}>{errors.email?.message}</p>\r\n        </Form.Group>\r\n\r\n        <h3>Gender</h3>\r\n        <input type=\"radio\" id=\"male\"  {...register(\"gender\")} value=\"male\" />\r\n        <label for=\"male\">Male</label><br />\r\n        <input type=\"radio\" id=\"female\" {...register(\"gender\")} value=\"female\" />\r\n        <label for=\"female\">Female</label><br />\r\n        <input type=\"radio\" id=\"other\" {...register(\"gender\")} value=\"other\" />\r\n        <label for=\"other\">Other</label>\r\n\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Phone Number</Form.Label>\r\n          <Form.Control type=\"number\" {...register(\"phoneNumber\")}  />\r\n          <p style={{ color: 'red' }}>{errors.phoneNumber?.message}</p>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control type=\"password\" {...register(\"password\")}  />\r\n          <p style={{ color: 'red' }}>{errors.password?.message}</p>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control type=\"password\" {...register(\"confirmPassword\")}  />\r\n          <p style={{ color: 'red' }}>{errors.confirmPassword?.message}</p>\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>      \r\n\r\n      <div>\r\n      {(formData!== undefined) ? <h2>Output</h2> : null}\r\n        {(formData !== undefined) ? Object.keys(formData).map((value) => (\r\n          <div>\r\n            <div style={{ textAlign: 'center' }}> \r\n              <p style={{ display: 'inline-block' }}>{value} : </p>\r\n              <span style={{ display: 'inline-block' }}> {formData[value]}</span>\r\n            </div>\r\n          </div>\r\n        )) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register;","import randomSeed from './random';\r\n\r\nconst femaleFirstNames = ['Mary', 'Linda', 'Barbara', 'Maria', 'Lisa', 'Nancy', 'Betty', 'Sandra', 'Sharon'];\r\nconst maleFirstNames = ['James', 'John', 'Robert', 'William', 'David', 'Richard', 'Thomas', 'Paul', 'Mark'];\r\nconst lastNames = [\r\n  'Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Johnson', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson',\r\n  'Thomas', 'Jackson', 'Williams', 'White', 'Harris', 'Davis', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark',\r\n];\r\nconst usStates = [\r\n  { name: 'Alabama', abbr: 'AL' },\r\n  { name: 'Alaska', abbr: 'AK' },\r\n  { name: 'American Samoa', abbr: 'AS' },\r\n  { name: 'Arizona', abbr: 'AZ' },\r\n  { name: 'Arkansas', abbr: 'AR' },\r\n  { name: 'California', abbr: 'CA' },\r\n  { name: 'Colorado', abbr: 'CO' },\r\n  { name: 'Connecticut', abbr: 'CT' },\r\n  { name: 'Delaware', abbr: 'DE' },\r\n  { name: 'District Of Columbia', abbr: 'DC' },\r\n  { name: 'Federated States Of Micronesia', abbr: 'FM' },\r\n  { name: 'Florida', abbr: 'FL' },\r\n  { name: 'Georgia', abbr: 'GA' },\r\n  { name: 'Guam', abbr: 'GU' },\r\n  { name: 'Hawaii', abbr: 'HI' },\r\n  { name: 'Idaho', abbr: 'ID' },\r\n  { name: 'Illinois', abbr: 'IL' },\r\n  { name: 'Indiana', abbr: 'IN' },\r\n  { name: 'Iowa', abbr: 'IA' },\r\n  { name: 'Kansas', abbr: 'KS' },\r\n  { name: 'Kentucky', abbr: 'KY' },\r\n  { name: 'Louisiana', abbr: 'LA' },\r\n  { name: 'Maine', abbr: 'ME' },\r\n  { name: 'Marshall Islands', abbr: 'MH' },\r\n  { name: 'Maryland', abbr: 'MD' },\r\n  { name: 'Massachusetts', abbr: 'MA' },\r\n  { name: 'Michigan', abbr: 'MI' },\r\n  { name: 'Minnesota', abbr: 'MN' },\r\n  { name: 'Mississippi', abbr: 'MS' },\r\n  { name: 'Missouri', abbr: 'MO' },\r\n  { name: 'Montana', abbr: 'MT' },\r\n  { name: 'Nebraska', abbr: 'NE' },\r\n  { name: 'Nevada', abbr: 'NV' },\r\n  { name: 'New Hampshire', abbr: 'NH' },\r\n  { name: 'New Jersey', abbr: 'NJ' },\r\n  { name: 'New Mexico', abbr: 'NM' },\r\n  { name: 'New York', abbr: 'NY' },\r\n  { name: 'North Carolina', abbr: 'NC' },\r\n  { name: 'North Dakota', abbr: 'ND' },\r\n  { name: 'Northern Mariana Islands', abbr: 'MP' },\r\n  { name: 'Ohio', abbr: 'OH' },\r\n  { name: 'Oklahoma', abbr: 'OK' },\r\n  { name: 'Oregon', abbr: 'OR' },\r\n  { name: 'Palau', abbr: 'PW' },\r\n  { name: 'Pennsylvania', abbr: 'PA' },\r\n  { name: 'Puerto Rico', abbr: 'PR' },\r\n  { name: 'Rhode Island', abbr: 'RI' },\r\n  { name: 'South Carolina', abbr: 'SC' },\r\n  { name: 'South Dakota', abbr: 'SD' },\r\n  { name: 'Tennessee', abbr: 'TN' },\r\n  { name: 'Texas', abbr: 'TX' },\r\n  { name: 'Utah', abbr: 'UT' },\r\n  { name: 'Vermont', abbr: 'VT' },\r\n  { name: 'Virgin Islands', abbr: 'VI' },\r\n  { name: 'Virginia', abbr: 'VA' },\r\n  { name: 'Washington', abbr: 'WA' },\r\n  { name: 'West Virginia', abbr: 'WV' },\r\n  { name: 'Wisconsin', abbr: 'WI' },\r\n  { name: 'Wyoming', abbr: 'WY' },\r\n];\r\nconst cities = ['New York', 'Los Angeles', 'Chicago', 'Las Vegas', 'Austin', 'Tokyo', 'Rio de Janeiro', 'London', 'Paris'];\r\nconst cars = ['Honda Civic', 'Toyota Corolla', 'Chevrolet Cruze', 'Honda Accord', 'Nissan Altima', 'Kia Optima', 'Audi A4', 'BMW 750'];\r\nconst positions = ['CEO', 'IT Manager', 'Ombudsman', 'CMO', 'Controller', 'HR Manager', 'Shipping Manager', 'Sales Assistant', 'HR Assistant'];\r\n\r\nconst generateDate = ({\r\n  random,\r\n  year = 2017,\r\n  month = rand => Math.floor(rand() * 12),\r\n  day = rand => Math.floor(rand() * 30) + 1,\r\n}) => {\r\n  const getPart = part => (typeof part === 'function' ? part(random) : part);\r\n  const date = new Date(Date.UTC(getPart(year), getPart(month), getPart(day)));\r\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n};\r\n\r\nconst generatePhone = () => Math.random().toString().slice(2, 12).replace(/(\\d{3})(\\d{3})(\\d{4})$/, '($1) $2-$3');\r\n\r\nexport const defaultColumnValues = {\r\n  gender: ['Male', 'Female'],\r\n  name: [\r\n    'gender',\r\n    {\r\n      Male: maleFirstNames,\r\n      Female: femaleFirstNames,\r\n    },\r\n  ],\r\n  city: cities,\r\n  car: cars,\r\n};\r\n\r\nexport const defaultNestedColumnValues = {\r\n  user: [\r\n    ...[...maleFirstNames, ...femaleFirstNames].map((name, i) => ({\r\n      firstName: name,\r\n      lastName: lastNames[i],\r\n    })),\r\n  ],\r\n  position: positions,\r\n  city: cities,\r\n  car: cars.map(car => ({ model: car })),\r\n};\r\n\r\nexport const globalSalesValues = {\r\n  region: ['Asia', 'Europe', 'North America', 'South America', 'Australia', 'Africa'],\r\n  sector: ['Energy', 'Health', 'Manufacturing', 'Insurance', 'Banking', 'Telecom'],\r\n  channel: ['Resellers', 'Retail', 'VARs', 'Consultants', 'Direct', 'Telecom'],\r\n  units: ({ random }) => Math.floor(random() * 4) + 1,\r\n  customer: [\r\n    'Renewable Supplies', 'Energy Systems', 'Environment Solar', 'Beacon Systems', 'Apollo Inc',\r\n    'Gemini Stores', 'McCord Builders', 'Building M Inc', 'Global Services',\r\n    'Market Eco', 'Johnson & Assoc', 'Get Solar Inc', 'Supply Warehouse', 'Discovery Systems', 'Mercury Solar'],\r\n  product: ['SolarMax', 'SolarOne', 'EnviroCare', 'EnviroCare Max'],\r\n  amount: ({ random }) => (Math.floor((random() * 1000000) + 1000) / 20),\r\n  discount: ({ random }) => Math.round(random() * 0.5 * 1000) / 1000,\r\n  saleDate: ({ random }) => generateDate({\r\n    random,\r\n    year: 2016,\r\n    month: () => Math.floor(random() * 3) + 1,\r\n  }),\r\n  shipped: [true, false],\r\n};\r\n\r\nexport const employeeValues = {\r\n  gender: ['Male', 'Female'],\r\n  prefix: [\r\n    'gender',\r\n    {\r\n      Male: ['Mr.', 'Dr.'],\r\n      Female: ['Mrs.', 'Ms.', 'Dr.'],\r\n    },\r\n  ],\r\n  firstName: [\r\n    'gender',\r\n    {\r\n      Male: maleFirstNames,\r\n      Female: femaleFirstNames,\r\n    },\r\n  ],\r\n  lastName: lastNames,\r\n  position: positions,\r\n  state: usStates.map(state => state.name),\r\n  birthDate: ({ random }) => generateDate({\r\n    random,\r\n    year: () => Math.floor(random() * 30) + 1960,\r\n  }),\r\n  phone: generatePhone,\r\n};\r\n\r\nexport const employeeTaskValues = {\r\n  priority: ['High', 'Low', 'Normal'],\r\n  status: ['Completed', 'In Progress', 'Deferred', 'Need Assistance'],\r\n  subject: [\r\n    'Choose between PPO and HMO Health Plan',\r\n    'Google AdWords Strategy',\r\n    'New Brochures',\r\n    'Update NDA Agreement',\r\n    'Review Product Recall Report by Engineering Team',\r\n    'Update Personnel Files',\r\n    'Review Health Insurance Options Under the Affordable Care Act',\r\n    'Non-Compete Agreements',\r\n    'Give Final Approval for Refunds',\r\n    'Deliver R&D Plans',\r\n    'Decide on Mobile Devices to Use in the Field',\r\n    'Try New Touch-Enabled Apps',\r\n    'Approval on Converting to New HDMI Specification',\r\n    'Approve Hiring',\r\n    'Update Employee Files with New NDA',\r\n    'Provide New Health Insurance Docs',\r\n    'Prepare 3013 Marketing Plan',\r\n    'Rollout of New Website and Marketing Brochures',\r\n    'Review Sales Report and Approve Plans',\r\n    'Review Site Up-Time Report',\r\n    'Review HR Budget Company Wide',\r\n    'Final Budget Review',\r\n    'Sign Updated NDA',\r\n    'Review Overtime Report',\r\n    'Upgrade Server Hardware',\r\n    'Upgrade Personal Computers',\r\n    'Prepare Financial',\r\n    'Update Revenue Projections',\r\n    'Submit D&B Number to ISP for Credit Approval',\r\n    'Update Sales Strategy Documents',\r\n    'Refund Request Template',\r\n  ],\r\n  startDate: ({ random }) => generateDate({\r\n    random,\r\n    year: 2016,\r\n  }),\r\n  dueDate: ({ random, record }) => generateDate({\r\n    random,\r\n    year: 2016,\r\n    month: () => Math.floor(random() * 2) + (new Date(record.startDate)).getMonth(),\r\n  }),\r\n};\r\n\r\nexport function generateRows({\r\n  columnValues = defaultColumnValues,\r\n  length,\r\n  random = randomSeed(329972281),\r\n}) {\r\n  const data = [];\r\n  const columns = Object.keys(columnValues);\r\n\r\n  for (let i = 0; i < length; i += 1) {\r\n    const record = {};\r\n\r\n    columns.forEach((column) => {\r\n      let values = columnValues[column];\r\n\r\n      if (typeof values === 'function') {\r\n        record[column] = values({ random, index: i, record });\r\n        return;\r\n      }\r\n\r\n      while (values.length === 2 && typeof values[1] === 'object') {\r\n        values = values[1][record[values[0]]];\r\n      }\r\n\r\n      const value = values[Math.floor(random() * values.length)];\r\n      if (typeof value === 'object') {\r\n        record[column] = { ...value };\r\n      } else {\r\n        record[column] = value;\r\n      }\r\n    });\r\n\r\n    data.push(record);\r\n  }\r\n\r\n  return data;\r\n}\r\n","import React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn,\r\n} from '@devexpress/dx-react-grid-material-ui';\r\n\r\n\r\nimport {\r\n  generateRows,\r\n  defaultColumnValues,\r\n} from '../demo-data/generator';\r\n\r\nconst getRowId = row => row.id;\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default () => {\r\n  const [columns] = useState([\r\n    { name: 'name', title: 'Name' },\r\n    { name: 'gender', title: 'Gender' },\r\n    { name: 'qualification', title: 'Qualification' },\r\n    { name: 'email', title: 'Email' },\r\n  ]);\r\n  const [rows, setRows] = useState(generateRows({\r\n    columnValues: { id: ({ index }) => index, ...defaultColumnValues },\r\n    length: 8,\r\n  }));\r\n  const [editingStateColumnExtensions] = useState([\r\n    { columnName: 'name', editingEnabled: true },\r\n  ]);\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows;\r\n    if (added) {\r\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n      changedRows = [\r\n        ...rows,\r\n        ...added.map((row, index) => ({\r\n          id: startingAddedId + index,\r\n          ...row,\r\n        })),\r\n      ];\r\n    }\r\n    if (changed) {\r\n      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n    }\r\n    if (deleted) {\r\n      const deletedSet = new Set(deleted);\r\n      changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n    }\r\n    setRows(changedRows);\r\n  };\r\n\r\n  return (\r\n    <Paper>\r\n      <Grid\r\n        rows={rows}\r\n        columns={columns}\r\n        getRowId={getRowId}\r\n      >\r\n        <EditingState\r\n          onCommitChanges={commitChanges}\r\n          defaultEditingRowIds={[0]}\r\n          columnExtensions={editingStateColumnExtensions}\r\n        />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn\r\n          showAddCommand\r\n          showEditCommand\r\n          showDeleteCommand\r\n        />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};","/* eslint no-bitwise: [\"error\", { \"allow\": [\"<<\", \">>\", \"&\"] }] */\r\n\r\nexport default function (seed = 123456789) {\r\n  let mW = seed;\r\n  let mZ = 987654321;\r\n  const mask = 0xffffffff;\r\n\r\n  return () => {\r\n    mZ = ((36969 * (mZ & 65535)) + (mZ >> 16)) & mask;\r\n    mW = ((18000 * (mW & 65535)) + (mW >> 16)) & mask;\r\n    let result = ((mZ << 16) + mW) & mask;\r\n    result /= 4294967296;\r\n    return result + 0.5;\r\n  };\r\n}\r\n","import React, { useState } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Register from './components/register';\nimport Users from './components/users';\n\nfunction App() {\n  const [ conditionalRender, setConditionalRender ] = useState(undefined);\n\n  return (\n    <div>\n      <Container>\n        <h2>My Assignment</h2>\n        <p>Click on the button to view the particular assignment.</p>\n        <Button onClick={() => setConditionalRender(\"register\")}>\n          Assignment 1 Register\n        </Button>\n        <Button onClick={() => setConditionalRender(\"users\")} style={{ marginLeft: '30px' }}>\n          Assignment 2 Users\n        </Button>\n\n        {(conditionalRender === \"register\") ? <Register /> : (conditionalRender === \"users\") ? <Users /> : null}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}